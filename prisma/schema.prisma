// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workspace     Workspace[]
  comment       Comment[]
  log           Log[]
  feedLog       FeedLog[]
  member        Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id       Int @id @default(autoincrement())
  name     String
  isPublic Boolean @default(false)
  userId   String
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  feed     Feed[]
  member   Member[]
}

model Feed {
  id          Int @id @default(autoincrement())
  title       String
  feedUrl     String
  link        String
  description String
  imageUrl    String
  workspaceId Int
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  feedAction  FeedAction[]
  comment     Comment[]
}

model FeedAction {
  link String
  title String
  type String
  description String
  pubDate DateTime
  feedId Int
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  
  @@id([link, feedId])
}

model Comment {
  id          Int @id @default(autoincrement())
  text        String
  itemLink    String
  feedItemUrl String
  userId      String
  feedId      Int
  parentId    Int?
  feed        Feed      @relation(fields: [feedId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children    Comment[] @relation("children")
  parent      Comment?  @relation("children", fields: [parentId], references: [id], onDelete: Cascade)
}

model Log {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id])
}

model Member {
  id Int @id @default(autoincrement())
  isOwner Boolean
  userId String
  workspaceId Int
  user User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model FeedLog {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id])
}